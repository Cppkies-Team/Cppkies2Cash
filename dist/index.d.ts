// Generated by dts-bundle-generator v5.7.0

declare class Coin {
	constructor();
	x: number;
	y: number;
	z: number;
	r: number;
	xd: number;
	yd: number;
	zd: number;
	rd: number;
	draw: (this: this) => void;
	logic: (this: this) => void;
}
export declare type EventListenerFunction<T extends Record<string, [
	unknown,
	unknown
]>, N extends keyof T> = (src: T[N][0]) => T[N][1];
export declare type EventList<T extends Record<string, [
	unknown,
	unknown
]>> = {
	[P in keyof T]: EventListenerFunction<T, P>[];
};
declare class ReturnableEventEmitter<T extends Record<string, [
	unknown,
	unknown
]>> {
	_events: EventList<T>;
	/**
	 * Registers an event listener which is called each time the event is emitted
	 * @param name Name of the hook
	 * @param func The event listener function
	 */
	on<N extends keyof T>(name: N, func: EventListenerFunction<T, N>): void;
	/**
	 * Registers an event listener which is called for the first time the event is emitted
	 * @param name Name of the hook
	 * @param func The event listener function
	 */
	once<N extends keyof T>(name: N, func: EventListenerFunction<T, N>): void;
	/**
	 * Removes an event listener which was registered before
	 * @param name Name of the hook
	 * @param func The event listener function
	 */
	off<N extends keyof T>(name: N, func: EventListenerFunction<T, N>): void;
	/**
	 * Emits the event, triggering all registered event listeners under the event name and modifying the given value
	 * @param name The name of the event
	 * @param startingValue The starting value for the listeners
	 */
	emit<N extends keyof T>(name: N, ...startingValue: T[N][0] extends void ? [
		undefined?
	] : [
		T[N][0]
	]): T[N][1];
	/**
	 * Emits the event, triggering all registered event listeners under the event name and *not* modifying the given value
	 * @param name The name of the event
	 * @param startingValue The starting value for the listeners
	 */
	constEmit<N extends keyof T>(name: N, ...startingValue: T[N][0] extends void ? [
		undefined?
	] : [
		T[N][0]
	]): void;
}
export declare type Hooks = ReturnableEventEmitter<{
	trail: [
		number,
		number
	];
	coinImageResolve: [
		HTMLImageElement,
		HTMLImageElement
	];
	coin: [
		Coin,
		void
	];
	stream: [
		number,
		number
	];
	coinLogic: [
		Coin,
		void
	];
}>;
export declare const hooks: Hooks;
export declare const on: any;

export {};
/* eslint-disable no-var */
declare function l(what: string): Element

declare function Beautify(what: number, floats: number): string

type PseudoNull = 0

type PseudoBoolean = 0 | 1

declare class Loader {
	constructor()
	/**
	 * The amount of loading assets
	 */
	loadingN: number

	assets: undefined[] & Record<string, HTMLImageElement>

	/**
	 * The prefix to all assets
	 */
	domain: string
	/**
	 * A callback to when all assets is loaded
	 */
	loaded: PseudoNull | (() => void)
	/**
	 * A pseudoboolean, is true when all assets are loaded for the first time
	 */
	doneLoading: PseudoBoolean
	/**
	 * Loads assets
	 * @param assets The iterable of strings to get asset names from
	 */
	Load: (assets: string[]) => void
	/**
	 * An internal callback function
	 */
	onLoad: (e: Event) => void
	/**
	 * Returns the progress of loading all assets
	 */
	getProgress: () => number
}

declare var ready: PseudoBoolean

declare function init(): void

declare var cashDiv: HTMLElement

declare var canvas: HTMLCanvasElement

declare var ctx: CanvasRenderingContext2D

declare var T: number

declare function sortMap(a: Coin, b: Coin): -1 | 0 | 1

declare var redeeming: PseudoBoolean

declare var on: PseudoBoolean

declare function redeem(): void

declare var cash: number

declare var Coins: Coin[]

declare class Coin {
	constructor()
	x: number
	y: number
	z: number
	r: number
	xd: number
	yd: number
	zd: number
	rd: number
	draw: (this: this) => void
	logic: (this: this) => void
}

declare var stream: number

declare var streamT: number

declare function loop(): void

declare function launch(): void

declare var toLoad: string[]

declare var loader: Loader

declare var pic: Loader["assets"]

/* eslint-enable no-var */
